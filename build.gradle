plugins {
    id 'java-library'
    id 'maven-publish'
    alias(libs.plugins.javafx)
}

repositories {
    // Use this only for local development! TODO comment this
    mavenLocal()

    mavenCentral()
  
    maven {
        url "https://maven.scijava.org/content/repositories/releases"
    }
  
    maven {
        url "https://maven.scijava.org/content/repositories/snapshots"
    }
  
}

ext.moduleName = 'qupath.extension.efficientv2unet'
ext.qupathVersion = gradle.ext.qupathVersion

base {
    description = 'Efficient V2 UNet Extension' // TODO
    version = "0.5.0"       // I'm matching it to the qupath version, can be major.minor.patch-suffix
    //group = 'io.github.qupath'
}

dependencies {
    implementation "io.github.qupath:qupath-gui-fx:${qupathVersion}"
    implementation libs.qupath.fxtras
    implementation libs.bundles.logging
    testImplementation libs.junit
    testRuntimeOnly libs.junit.platform

    // Cellpose dependency  ---------
    // Online dependency
    //implementation "io.github.qupath:qupath-extension-cellpose:0.9.3" // for building, rely on this version of the cellpose package
    // FIXME add dependency on local version of cellpose (which is now 0.9.3)
    implementation project(':qupath-extension-cellpose')
}

processResources {
  from ("${projectDir}/LICENSE.txt") {
    into 'META-INF/licenses/'
  }
}

tasks.register("copyDependencies", Copy) {
    description "Copy dependencies into the build directory for use elsewhere"
    group "QuPath"
    
    from configurations.default
    into 'build/libs'
}

/*
 * Ensure Java 17 compatibility
 */
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17) // changed this from 11 to 17
    }
    if (project.properties['sources'])
	    withSourcesJar()
    if (project.properties['javadocs'])
	    withJavadocJar()
}
/*
 * Manifest info
 */
jar {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Version": archiveVersion,
                "Automatic-Module-Name": "io.github." + moduleName
        )
    }
}


/*
 * Create javadocs for all modules/packages in one place.
 * Use -PstrictJavadoc=true to fail on error with doclint (which is rather strict).
 */
def strictJavadoc = findProperty('strictJavadoc')
if (!strictJavadoc) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

// This is the same as in the cellpose extension (not in the stardist extension)
javadoc {
    options.addBooleanOption('html5', true)
    destinationDir = new File(project.rootDir, "docs")
}

/*
 * Avoid 'Entry .gitkeep is a duplicate but no duplicate handling strategy has been set.'
 * when using withSourcesJar()
 */
tasks.withType(org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.named('test') {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = "SciJava"
            def releasesRepoUrl = uri("https://maven.scijava.org/content/repositories/releases")
            def snapshotsRepoUrl = uri("https://maven.scijava.org/content/repositories/snapshots")
            // Use gradle -Prelease publish
            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASS")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.github.qupath'
            from components.java

            pom {
                licenses {
                    license {
                        name = 'Apache License v2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
            }
        }
    }
}
